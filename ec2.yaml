---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for EC2 instance
Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
    - t3.nano
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t3.nano
  ImageId:
    Description: EC2 instance Image ID
    Type: String
  VpcId:
    Type: String
    Description: VPC id
  KeyName:
    Type: String
    Description: Access key name
    Default: ''
  AssociatePublicIpAddress:
    Type: String
    Description: Select a default subnet ID.
    Default: false
  SubnetId:
    Type: String
    Description: Select a default subnet ID.
  serverEIP:
    Description: server EIP
    Type: String
  SecurityGroup:
    Description: Allow ssh to client host
    Type: String
  TagEnvironment:
    Description: Enviroment tag
    Type: String
  AnsibleCommand:
    Description: RUn ansible-playbook
    Type: String  

Resources:
  ec2:    
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeType: "gp2"
            DeleteOnTermination: true
            VolumeSize: 20 
      NetworkInterfaces:
      - AssociatePublicIpAddress:
          Ref: AssociatePublicIpAddress
        DeviceIndex: '0'
        GroupSet:
        - Fn::ImportValue:
            Ref: SecurityGroup
        SubnetId:
          Fn::ImportValue:
            Ref: SubnetId
      ImageId:
        Ref: ImageId
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          # Update
          if [ -f '/etc/redhat-release' ]; then yum update -y; fi
          if [ -f '/etc/debian_version' ]; then export DEBIAN_FRONTEND=noninteractive; fi 
          if [ -f '/etc/debian_version' ]; then apt-get update && apt-get upgrade -y; fi
          if [ -f '/etc/debian_version' ]; then apt-get install python -y; fi 
          cd /tmp
          # install PIP
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          python3 get-pip.py
          # Install ansible
          if [ -f '/etc/debian_version' ]; then pip install 'cryptography==2.4.2'; fi
          pip install 'ansible==2.7.2'
          # Install GIT client
          if [ -f '/etc/debian_version' ]; then apt-get install -y git; fi
          if [ -f '/etc/redhat-release' ]; then yum install -y git; fi
          # Add github key to known hosts
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          # Remove existing ansible installation 
          rm -rf /tmp/ansible
          # Get Ansible files from github
          git clone https://github.com/kpat71/ansible.git
          cd /tmp/ansible
          # Make log file for ansible logs
          mkdir -p /var/log/ansible/
          # Add variable to put log files to log file
          export ANSIBLE_LOG_PATH=/var/log/ansible/ansible.log
          #  RUN ansible playbook 
          ansible-playbook -i inventories/test/hosts site.yml
          AnsibleCommand:
            Ref: AnsibleCommand
      Tags:
        - Key: Environment
          Value:
            Ref: TagEnvironment

  EIPtoEc2:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: 
        Ref: ec2
      EIP:
        Fn::ImportValue:
          Ref: serverEIP
Outputs:
  Sshgw1Instanceid:
    Description: EC2 instance name
    Value:
      Ref: ec2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ec2"
